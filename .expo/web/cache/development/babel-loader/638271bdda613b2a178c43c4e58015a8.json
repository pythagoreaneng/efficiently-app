{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _ from 'lodash';\nimport XDate from 'xdate';\nimport dateutils from \"../../dateutils\";\nimport { xdateToData, toMarkingFormat } from \"../../interface\";\n\nvar commons = require(\"../commons\");\n\nvar TOP_POSITION = 65;\n\nvar Presenter = function () {\n  function Presenter() {\n    var _this = this;\n\n    _classCallCheck(this, Presenter);\n\n    this._getIconDown = function () {\n      return require(\"../../img/down.png\");\n    };\n\n    this._getIconUp = function () {\n      return require(\"../../img/up.png\");\n    };\n\n    this.getButtonIcon = function (date) {\n      var showTodayButton = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      if (!showTodayButton) {\n        return undefined;\n      }\n\n      var icon = _this._isPastDate(date) ? _this._getIconDown() : _this._getIconUp();\n      return icon;\n    };\n\n    this.setDate = function (props, date, newDate, updateState, updateSource) {\n      var sameMonth = dateutils.sameMonth(XDate(date), XDate(newDate));\n\n      var buttonIcon = _this.getButtonIcon(date, props.showTodayButton);\n\n      updateState(buttonIcon);\n\n      _.invoke(props, 'onDateChanged', date, updateSource);\n\n      if (!sameMonth) {\n        _.invoke(props, 'onMonthChange', xdateToData(XDate(date)), updateSource);\n      }\n    };\n\n    this.setDisabled = function (showTodayButton, newDisabledValue, oldDisabledValue, updateState) {\n      if (!showTodayButton || newDisabledValue === oldDisabledValue) {\n        return;\n      }\n\n      updateState(newDisabledValue);\n    };\n\n    this.shouldAnimateTodayButton = function (props) {\n      return props.showTodayButton;\n    };\n\n    this._isToday = function (date) {\n      var today = toMarkingFormat(XDate());\n      return today === date;\n    };\n\n    this.getTodayDate = function () {\n      return toMarkingFormat(XDate());\n    };\n\n    this.getPositionAnimation = function (date, todayBottomMargin) {\n      var toValue = _this._isToday(date) ? TOP_POSITION : -todayBottomMargin || -TOP_POSITION;\n      return {\n        toValue: toValue,\n        tension: 30,\n        friction: 8,\n        useNativeDriver: true\n      };\n    };\n\n    this.shouldAnimateOpacity = function (props) {\n      return props.disabledOpacity;\n    };\n\n    this.getOpacityAnimation = function (props, disabled) {\n      return {\n        toValue: disabled ? props.disabledOpacity : 1,\n        duration: 500,\n        useNativeDriver: true\n      };\n    };\n\n    this.getTodayFormatted = function () {\n      var todayString = XDate.locales[XDate.defaultLocale].today || commons.todayString;\n      var today = todayString.charAt(0).toUpperCase() + todayString.slice(1);\n      return today;\n    };\n  }\n\n  _createClass(Presenter, [{\n    key: \"_isPastDate\",\n    value: function _isPastDate(date) {\n      var today = XDate();\n      var d = XDate(date);\n\n      if (today.getFullYear() > d.getFullYear()) {\n        return true;\n      }\n\n      if (today.getFullYear() === d.getFullYear()) {\n        if (today.getMonth() > d.getMonth()) {\n          return true;\n        }\n\n        if (today.getMonth() === d.getMonth()) {\n          if (today.getDate() > d.getDate()) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n  }]);\n\n  return Presenter;\n}();\n\nexport default Presenter;","map":{"version":3,"sources":["C:/Users/NASSER/Desktop/efficiently/app/node_modules/react-native-calendars/src/expandableCalendar/Context/Presenter.js"],"names":["_","XDate","dateutils","xdateToData","toMarkingFormat","commons","require","TOP_POSITION","Presenter","_getIconDown","_getIconUp","getButtonIcon","date","showTodayButton","undefined","icon","_isPastDate","setDate","props","newDate","updateState","updateSource","sameMonth","buttonIcon","invoke","setDisabled","newDisabledValue","oldDisabledValue","shouldAnimateTodayButton","_isToday","today","getTodayDate","getPositionAnimation","todayBottomMargin","toValue","tension","friction","useNativeDriver","shouldAnimateOpacity","disabledOpacity","getOpacityAnimation","disabled","duration","getTodayFormatted","todayString","locales","defaultLocale","charAt","toUpperCase","slice","d","getFullYear","getMonth","getDate"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport XDate from 'xdate';\nimport dateutils from '../../dateutils';\nimport {xdateToData, toMarkingFormat} from '../../interface';\n\nconst commons = require('../commons');\nconst TOP_POSITION = 65;\n\nclass Presenter {\n  _isPastDate(date) {\n    const today = XDate();\n    const d = XDate(date);\n\n    if (today.getFullYear() > d.getFullYear()) {\n      return true;\n    }\n    if (today.getFullYear() === d.getFullYear()) {\n      if (today.getMonth() > d.getMonth()) {\n        return true;\n      }\n      if (today.getMonth() === d.getMonth()) {\n        if (today.getDate() > d.getDate()) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  _getIconDown = () => {\n    return require('../../img/down.png');\n  };\n\n  _getIconUp = () => {\n    return require('../../img/up.png');\n  };\n\n  getButtonIcon = (date, showTodayButton = true) => {\n    if (!showTodayButton) {\n      return undefined;\n    }\n    const icon = this._isPastDate(date) ? this._getIconDown() : this._getIconUp();\n    return icon;\n  };\n\n  setDate = (props, date, newDate, updateState, updateSource) => {\n    const sameMonth = dateutils.sameMonth(XDate(date), XDate(newDate));\n    const buttonIcon = this.getButtonIcon(date, props.showTodayButton);\n\n    updateState(buttonIcon);\n\n    _.invoke(props, 'onDateChanged', date, updateSource);\n\n    if (!sameMonth) {\n      _.invoke(props, 'onMonthChange', xdateToData(XDate(date)), updateSource);\n    }\n  };\n\n  setDisabled = (showTodayButton, newDisabledValue, oldDisabledValue, updateState) => {\n    if (!showTodayButton || newDisabledValue === oldDisabledValue) {\n      return;\n    }\n    updateState(newDisabledValue);\n  };\n\n  shouldAnimateTodayButton = props => {\n    return props.showTodayButton;\n  };\n\n  _isToday = date => {\n    const today = toMarkingFormat(XDate());\n    return today === date;\n  };\n\n  getTodayDate = () => {\n    return toMarkingFormat(XDate());\n  };\n\n  getPositionAnimation = (date, todayBottomMargin) => {\n    const toValue = this._isToday(date) ? TOP_POSITION : -todayBottomMargin || -TOP_POSITION;\n    return {\n      toValue,\n      tension: 30,\n      friction: 8,\n      useNativeDriver: true\n    };\n  };\n\n  shouldAnimateOpacity = props => {\n    return props.disabledOpacity;\n  };\n\n  getOpacityAnimation = (props, disabled) => {\n    return {\n      toValue: disabled ? props.disabledOpacity : 1,\n      duration: 500,\n      useNativeDriver: true\n    };\n  };\n\n  getTodayFormatted = () => {\n    const todayString = XDate.locales[XDate.defaultLocale].today || commons.todayString;\n    const today = todayString.charAt(0).toUpperCase() + todayString.slice(1);\n    return today;\n  };\n}\n\nexport default Presenter;\n"]},"metadata":{},"sourceType":"module"}