{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _ from 'lodash';\nimport React from 'react';\nimport { sameWeek } from \"../../dateutils\";\n\nvar commons = require(\"../commons\");\n\nimport XDate from 'xdate';\nimport { toMarkingFormat } from \"../../interface\";\nvar UPDATE_SOURCES = commons.UPDATE_SOURCES;\nvar NUMBER_OF_PAGES = 2;\n\nvar Presenter = function () {\n  function Presenter() {\n    var _this = this;\n\n    _classCallCheck(this, Presenter);\n\n    this.scrollToIndex = function (animated) {\n      _this.list.current.scrollToIndex({\n        animated: animated,\n        index: NUMBER_OF_PAGES\n      });\n    };\n\n    this.isSameWeek = function (date, prevDate, firstDay) {\n      return sameWeek(date, prevDate, firstDay);\n    };\n\n    this.onDayPressed = function (context, value) {\n      _.invoke(context, 'setDate', value.dateString, UPDATE_SOURCES.DAY_PRESS);\n    };\n\n    this.onScroll = function (_ref) {\n      var context = _ref.context,\n          updateState = _ref.updateState,\n          x = _ref.x,\n          page = _ref.page,\n          items = _ref.items,\n          width = _ref.width;\n\n      if (!_this._firstAndroidRTLScrollIgnored) {\n        _this._firstAndroidRTLScrollIgnored = true;\n        return;\n      }\n\n      x = _this._getX(x, items == null ? void 0 : items.length, width);\n\n      var newPage = _this._getNewPage(x, width);\n\n      if (_this._shouldUpdateState(page)) {\n        _.invoke(context, 'setDate', items[newPage], UPDATE_SOURCES.WEEK_SCROLL);\n\n        var data = _this._getItemsForPage(page, items);\n\n        updateState(data, newPage);\n      }\n    };\n\n    this.onMomentumScrollEnd = function (_ref2) {\n      var items = _ref2.items,\n          props = _ref2.props,\n          page = _ref2.page,\n          updateItems = _ref2.updateItems;\n\n      if (_this._isFirstPage(page) || _this._isLastPage(page, items)) {\n        _this.scrollToIndex(false);\n\n        var newWeekArray = _this.getDatesArray(props);\n\n        var updatedItems;\n\n        if (_this._isLastPage(page, items)) {\n          updatedItems = _this._mergeArraysFromEnd(items, newWeekArray);\n        } else {\n          updatedItems = _this._mergeArraysFromTop(items, newWeekArray);\n        }\n\n        updateItems(updatedItems);\n      }\n    };\n\n    this.shouldComponentUpdate = function (context, prevContext) {\n      var date = context.date,\n          updateSource = context.updateSource;\n      return date !== prevContext.date && updateSource !== UPDATE_SOURCES.WEEK_SCROLL;\n    };\n\n    this.getDatesArray = function (args) {\n      var array = [];\n\n      for (var index = -NUMBER_OF_PAGES; index <= NUMBER_OF_PAGES; index++) {\n        var d = _this.getDate(args, index);\n\n        array.push(d);\n      }\n\n      return array;\n    };\n\n    this._shouldUpdateState = function (page, newPage) {\n      return page !== newPage;\n    };\n\n    this._getX = function (x, itemsCount, containerWidth) {\n      if (_this._applyAndroidRtlFix) {\n        var numberOfPages = itemsCount - 1;\n        var overallWidth = numberOfPages * containerWidth;\n        return overallWidth - x;\n      }\n\n      return x;\n    };\n\n    this._getNewPage = function (x, containerWidth) {\n      return Math.round(x / containerWidth);\n    };\n\n    this._isFirstPage = function (page) {\n      return page === 0;\n    };\n\n    this._isLastPage = function (page, items) {\n      return page === items.length - 1;\n    };\n\n    this._getNexPageItems = function (items) {\n      return items.map(function (_, i) {\n        var index = i <= NUMBER_OF_PAGES ? i + NUMBER_OF_PAGES : i;\n        return items[index];\n      });\n    };\n\n    this._getFirstPageItems = function (items) {\n      return items.map(function (_, i) {\n        var index = i >= NUMBER_OF_PAGES ? i - NUMBER_OF_PAGES : i;\n        return items[index];\n      });\n    };\n\n    this._mergeArraysFromEnd = function (items, newArray) {\n      for (var i = NUMBER_OF_PAGES + 1; i < items.length; i++) {\n        items[i] = newArray[i];\n      }\n\n      return items;\n    };\n\n    this._mergeArraysFromTop = function (items, newArray) {\n      for (var i = 0; i < NUMBER_OF_PAGES; i++) {\n        items[i] = newArray[i];\n      }\n\n      return items;\n    };\n\n    this._getItemsForPage = function (page, items) {\n      if (_this._isLastPage(page, items)) {\n        return _this._getNexPageItems(items);\n      } else if (_this._isFirstPage(page)) {\n        return _this._getFirstPageItems(items);\n      }\n\n      return items;\n    };\n\n    this.list = React.createRef();\n    this._applyAndroidRtlFix = commons.isAndroid && commons.isRTL;\n    this._firstAndroidRTLScrollIgnored = !this._applyAndroidRtlFix;\n  }\n\n  _createClass(Presenter, [{\n    key: \"getDate\",\n    value: function getDate(_ref3, weekIndex) {\n      var current = _ref3.current,\n          context = _ref3.context,\n          firstDay = _ref3.firstDay;\n      var d = XDate(current || context.date);\n      var dayOfTheWeek = d.getDay();\n\n      if (dayOfTheWeek < firstDay && firstDay > 0) {\n        dayOfTheWeek = 7 + dayOfTheWeek;\n      }\n\n      var dd = weekIndex === 0 ? d : d.addDays(firstDay - dayOfTheWeek);\n      var newDate = dd.addWeeks(weekIndex);\n      return toMarkingFormat(newDate);\n    }\n  }]);\n\n  return Presenter;\n}();\n\nexport default Presenter;","map":{"version":3,"sources":["/Users/kw/LocalDev/efficiently-app/node_modules/react-native-calendars/src/expandableCalendar/WeekCalendar/presenter.js"],"names":["_","React","sameWeek","commons","require","XDate","toMarkingFormat","UPDATE_SOURCES","NUMBER_OF_PAGES","Presenter","scrollToIndex","animated","list","current","index","isSameWeek","date","prevDate","firstDay","onDayPressed","context","value","invoke","dateString","DAY_PRESS","onScroll","updateState","x","page","items","width","_firstAndroidRTLScrollIgnored","_getX","length","newPage","_getNewPage","_shouldUpdateState","WEEK_SCROLL","data","_getItemsForPage","onMomentumScrollEnd","props","updateItems","_isFirstPage","_isLastPage","newWeekArray","getDatesArray","updatedItems","_mergeArraysFromEnd","_mergeArraysFromTop","shouldComponentUpdate","prevContext","updateSource","args","array","d","getDate","push","itemsCount","containerWidth","_applyAndroidRtlFix","numberOfPages","overallWidth","Math","round","_getNexPageItems","map","i","_getFirstPageItems","newArray","createRef","isAndroid","isRTL","weekIndex","dayOfTheWeek","getDay","dd","addDays","newDate","addWeeks"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport {sameWeek} from '../../dateutils';\nconst commons = require('../commons');\nimport XDate from 'xdate';\nimport {toMarkingFormat} from '../../interface';\n\nconst UPDATE_SOURCES = commons.UPDATE_SOURCES;\n// must be a positive number\nconst NUMBER_OF_PAGES = 2;\n\nclass Presenter {\n  constructor() {\n    this.list = React.createRef();\n    this._applyAndroidRtlFix = commons.isAndroid && commons.isRTL;\n    // On Android+RTL there's an initial scroll that cause issues\n    this._firstAndroidRTLScrollIgnored = !this._applyAndroidRtlFix;\n  }\n\n  scrollToIndex = animated => {\n    this.list.current.scrollToIndex({animated, index: NUMBER_OF_PAGES});\n  };\n\n  isSameWeek = (date, prevDate, firstDay) => {\n    return sameWeek(date, prevDate, firstDay);\n  };\n\n  // Events\n\n  onDayPressed = (context, value) => {\n    _.invoke(context, 'setDate', value.dateString, UPDATE_SOURCES.DAY_PRESS);\n  };\n\n  onScroll = ({context, updateState, x, page, items, width}) => {\n    if (!this._firstAndroidRTLScrollIgnored) {\n      this._firstAndroidRTLScrollIgnored = true;\n      return;\n    }\n\n    x = this._getX(x, items?.length, width);\n    const newPage = this._getNewPage(x, width);\n\n    if (this._shouldUpdateState(page)) {\n      _.invoke(context, 'setDate', items[newPage], UPDATE_SOURCES.WEEK_SCROLL);\n      const data = this._getItemsForPage(page, items);\n      updateState(data, newPage);\n    }\n  };\n\n  onMomentumScrollEnd = ({items, props, page, updateItems}) => {\n    if (this._isFirstPage(page) || this._isLastPage(page, items)) {\n      this.scrollToIndex(false);\n\n      const newWeekArray = this.getDatesArray(props);\n      let updatedItems;\n      if (this._isLastPage(page, items)) {\n        updatedItems = this._mergeArraysFromEnd(items, newWeekArray);\n      } else {\n        updatedItems = this._mergeArraysFromTop(items, newWeekArray);\n      }\n\n      updateItems(updatedItems);\n    }\n  };\n\n  shouldComponentUpdate = (context, prevContext) => {\n    const {date, updateSource} = context;\n    return (\n      date !== prevContext.date &&\n      updateSource !== UPDATE_SOURCES.WEEK_SCROLL\n    );\n  };\n\n  getDate({current, context, firstDay}, weekIndex) {\n    const d = XDate(current || context.date);\n    // get the first day of the week as date (for the on scroll mark)\n    let dayOfTheWeek = d.getDay();\n    if (dayOfTheWeek < firstDay && firstDay > 0) {\n      dayOfTheWeek = 7 + dayOfTheWeek;\n    }\n\n    // leave the current date in the visible week as is\n    const dd = weekIndex === 0 ? d : d.addDays(firstDay - dayOfTheWeek);\n    const newDate = dd.addWeeks(weekIndex);\n    return toMarkingFormat(newDate);\n  }\n\n  getDatesArray = args => {\n    const array = [];\n    for (let index = -NUMBER_OF_PAGES; index <= NUMBER_OF_PAGES; index++) {\n      const d = this.getDate(args, index);\n      array.push(d);\n    }\n    return array;\n  };\n\n  _shouldUpdateState = (page, newPage) => {\n    return page !== newPage;\n  };\n\n  _getX = (x, itemsCount, containerWidth) => {\n    if (this._applyAndroidRtlFix) {\n      const numberOfPages = itemsCount - 1;\n      const overallWidth = numberOfPages * containerWidth;\n      return overallWidth - x;\n    }\n    return x;\n  };\n\n  _getNewPage = (x, containerWidth) => {\n    return Math.round(x / containerWidth);\n  };\n\n  _isFirstPage = page => {\n    return page === 0;\n  };\n\n  _isLastPage = (page, items) => {\n    return page === items.length - 1;\n  };\n\n  _getNexPageItems = items => {\n    return items.map((_, i) => {\n      const index = i <= NUMBER_OF_PAGES ? i + NUMBER_OF_PAGES : i;\n      return items[index];\n    });\n  };\n\n  _getFirstPageItems = items => {\n    return items.map((_, i) => {\n      const index = i >= NUMBER_OF_PAGES ? i - NUMBER_OF_PAGES : i;\n      return items[index];\n    });\n  };\n\n  _mergeArraysFromEnd = (items, newArray) => {\n    for (let i = NUMBER_OF_PAGES + 1; i < items.length; i++) {\n      items[i] = newArray[i];\n    }\n    return items;\n  };\n\n  _mergeArraysFromTop = (items, newArray) => {\n    for (let i = 0; i < NUMBER_OF_PAGES; i++) {\n      items[i] = newArray[i];\n    }\n    return items;\n  };\n\n  _getItemsForPage = (page, items) => {\n    if (this._isLastPage(page, items)) {\n      return this._getNexPageItems(items);\n    } else if (this._isFirstPage(page)) {\n      return this._getFirstPageItems(items);\n    }\n    return items;\n  };\n}\n\nexport default Presenter;\n"]},"metadata":{},"sourceType":"module"}