{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport clamp from 'clamp';\nimport { TIME_CONSTANT, DELTA_THRESHOLD } from \"./constants\";\nvar density = PixelRatio.get();\n\nvar emptyFunc = function emptyFunc() {};\n\nvar FlickAnimation = function () {\n  function FlickAnimation(configs) {\n    _classCallCheck(this, FlickAnimation);\n\n    this._listeners = [];\n    this._min = configs.min;\n    this._max = configs.max;\n    this._onMomentumEnd = emptyFunc;\n    this._onUpdateListener = emptyFunc;\n  }\n\n  _createClass(FlickAnimation, [{\n    key: \"_updateValue\",\n    value: function _updateValue() {\n      if (!this._active) {\n        return;\n      }\n\n      var elapsedTime = Date.now() - this._startTime;\n\n      var delta = -(this._velocity / this._friction) * Math.exp(-elapsedTime / TIME_CONSTANT);\n\n      if (this._toValue == null && Math.abs(delta) < DELTA_THRESHOLD) {\n        this.stop();\n        return;\n      }\n\n      var isMovingDown = delta < 0;\n\n      if (this._toValue != null) {\n        delta = isMovingDown ? Math.min(delta, -DELTA_THRESHOLD) : Math.max(delta, DELTA_THRESHOLD);\n      }\n\n      var min = !isMovingDown ? this._min : this._toValue != null ? this._toValue : this._min;\n      var max = isMovingDown ? this._max : this._toValue != null ? this._toValue : this._max;\n      this._fromValue = clamp(this._fromValue + delta, min, max);\n\n      this._onUpdateListener(this._fromValue);\n\n      if (this._fromValue === this._toValue || this._fromValue === this._min || this._fromValue === this._max) {\n        this.stop();\n        return;\n      }\n\n      this._animationFrame = requestAnimationFrame(this._updateValue.bind(this));\n    }\n  }, {\n    key: \"setMax\",\n    value: function setMax(value) {\n      this._max = value;\n    }\n  }, {\n    key: \"setMin\",\n    value: function setMin(value) {\n      this._min = value;\n    }\n  }, {\n    key: \"start\",\n    value: function start(configs) {\n      this._active = true;\n      this._startTime = Date.now();\n      this._toValue = configs.toValue;\n      this._fromValue = configs.fromValue;\n      this._friction = clamp(configs.friction, 0, 1);\n      this._velocity = configs.velocity * density * 10;\n      this._onMomentumEnd = configs.onMomentumEnd || emptyFunc;\n      this._animationFrame = requestAnimationFrame(this._updateValue.bind(this));\n      this._interactionHandler = InteractionManager.createInteractionHandle();\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this._active) {\n        this._active = false;\n\n        this._onMomentumEnd(this._fromValue);\n      }\n\n      if (this._interactionHandler) {\n        InteractionManager.clearInteractionHandle(this._interactionHandler);\n      }\n\n      cancelAnimationFrame(this._animationFrame);\n    }\n  }, {\n    key: \"onUpdate\",\n    value: function onUpdate(listener) {\n      var _this = this;\n\n      this._onUpdateListener = listener;\n      return {\n        remove: function remove() {\n          _this._onUpdateListener = emptyFunc;\n\n          _this.stop();\n        }\n      };\n    }\n  }, {\n    key: \"predictNextPosition\",\n    value: function predictNextPosition(_ref) {\n      var fromValue = _ref.fromValue,\n          velocity = _ref.velocity,\n          friction = _ref.friction;\n      var v = velocity * density * 10;\n      var nextValue = Array.from({\n        length: 60\n      }).reduce(function (result, _, i) {\n        var delta = -(v / friction) * Math.exp(-(16.67 * i) / TIME_CONSTANT);\n        return result + delta;\n      }, fromValue);\n      return clamp(nextValue, this._min, this._max);\n    }\n  }]);\n\n  return FlickAnimation;\n}();\n\nexport { FlickAnimation as default };","map":{"version":3,"sources":["/Users/kw/LocalDev/efficiently-app/node_modules/rn-sliding-up-panel/libs/FlickAnimation.js"],"names":["clamp","TIME_CONSTANT","DELTA_THRESHOLD","density","PixelRatio","get","emptyFunc","FlickAnimation","configs","_listeners","_min","min","_max","max","_onMomentumEnd","_onUpdateListener","_active","elapsedTime","Date","now","_startTime","delta","_velocity","_friction","Math","exp","_toValue","abs","stop","isMovingDown","_fromValue","_animationFrame","requestAnimationFrame","_updateValue","bind","value","toValue","fromValue","friction","velocity","onMomentumEnd","_interactionHandler","InteractionManager","createInteractionHandle","clearInteractionHandle","cancelAnimationFrame","listener","remove","v","nextValue","Array","from","length","reduce","result","_","i"],"mappings":"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","sourcesContent":["import {InteractionManager, PixelRatio} from 'react-native'\nimport clamp from 'clamp'\n\nimport {TIME_CONSTANT, DELTA_THRESHOLD} from './constants'\n\nconst density = PixelRatio.get()\nconst emptyFunc = () => {}\n\nexport default class FlickAnimation {\n  _listeners = []\n\n  constructor(configs) {\n    this._min = configs.min\n    this._max = configs.max\n    this._onMomentumEnd = emptyFunc\n    this._onUpdateListener = emptyFunc\n  }\n\n  _updateValue() {\n    if (!this._active) {\n      return\n    }\n\n    const elapsedTime = Date.now() - this._startTime\n    let delta = -(this._velocity / this._friction) * Math.exp(-elapsedTime / TIME_CONSTANT) // prettier-ignore\n\n    // If delta is smaller than a threshold value,\n    // and the panel is about to stop without any anchor point\n    if (this._toValue == null && Math.abs(delta) < DELTA_THRESHOLD) {\n      this.stop()\n      return\n    }\n\n    const isMovingDown = delta < 0\n\n    // Otherwise, ensure delta is alway greater than threshold value\n    if (this._toValue != null) {\n      delta = isMovingDown\n        ? Math.min(delta, -DELTA_THRESHOLD)\n        : Math.max(delta, DELTA_THRESHOLD)\n    }\n\n    const min = !isMovingDown ? this._min : this._toValue != null ? this._toValue : this._min // prettier-ignore\n    const max = isMovingDown ? this._max : this._toValue != null ? this._toValue : this._max // prettier-ignore\n\n    this._fromValue = clamp(this._fromValue + delta, min, max)\n    this._onUpdateListener(this._fromValue)\n\n    if (\n      this._fromValue === this._toValue ||\n      this._fromValue === this._min ||\n      this._fromValue === this._max\n    ) {\n      this.stop()\n      return\n    }\n\n    this._animationFrame = requestAnimationFrame(this._updateValue.bind(this))\n  }\n\n  setMax(value) {\n    this._max = value\n  }\n\n  setMin(value) {\n    this._min = value\n  }\n\n  start(configs) {\n    this._active = true\n    this._startTime = Date.now()\n    this._toValue = configs.toValue\n    this._fromValue = configs.fromValue\n    this._friction = clamp(configs.friction, 0, 1)\n    this._velocity = configs.velocity * density * 10\n    this._onMomentumEnd = configs.onMomentumEnd || emptyFunc\n    this._animationFrame = requestAnimationFrame(this._updateValue.bind(this))\n    this._interactionHandler = InteractionManager.createInteractionHandle()\n  }\n\n  stop() {\n    if (this._active) {\n      this._active = false\n      this._onMomentumEnd(this._fromValue)\n    }\n\n    if (this._interactionHandler) {\n      InteractionManager.clearInteractionHandle(this._interactionHandler)\n    }\n\n    cancelAnimationFrame(this._animationFrame)\n  }\n\n  onUpdate(listener) {\n    this._onUpdateListener = listener\n\n    return {\n      remove: () => {\n        this._onUpdateListener = emptyFunc\n        this.stop()\n      }\n    }\n  }\n\n  predictNextPosition({fromValue, velocity, friction}) {\n    const v = velocity * density * 10\n\n    const nextValue = Array.from({length: 60}).reduce((result, _, i) => {\n      const delta = -(v / friction) * Math.exp(-(16.67 * i) / TIME_CONSTANT) // prettier-ignore\n      return result + delta\n    }, fromValue)\n\n    return clamp(nextValue, this._min, this._max)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}