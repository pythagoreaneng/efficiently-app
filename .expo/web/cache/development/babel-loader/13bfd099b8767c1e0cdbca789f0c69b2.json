{"ast":null,"code":"var XDate = require('xdate');\n\nimport { parseDate } from \"./interface\";\n\nfunction sameMonth(a, b) {\n  return a instanceof XDate && b instanceof XDate && a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth();\n}\n\nfunction sameDate(a, b) {\n  return a instanceof XDate && b instanceof XDate && a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth() && a.getDate() === b.getDate();\n}\n\nfunction sameWeek(d1, d2, firstDayOfWeek) {\n  var weekDates = getWeekDates(d1, firstDayOfWeek, 'yyyy-MM-dd');\n  return weekDates == null ? void 0 : weekDates.includes(d2);\n}\n\nfunction isToday(day) {\n  return sameDate(XDate(day), XDate.today());\n}\n\nfunction isGTE(a, b) {\n  return b.diffDays(a) > -1;\n}\n\nfunction isLTE(a, b) {\n  return a.diffDays(b) > -1;\n}\n\nfunction fromTo(a, b) {\n  var days = [];\n  var from = +a,\n      to = +b;\n\n  for (; from <= to; from = new XDate(from, true).addDays(1).getTime()) {\n    days.push(new XDate(from, true));\n  }\n\n  return days;\n}\n\nfunction month(xd) {\n  var year = xd.getFullYear(),\n      month = xd.getMonth();\n  var days = new Date(year, month + 1, 0).getDate();\n  var firstDay = new XDate(year, month, 1, 0, 0, 0, true);\n  var lastDay = new XDate(year, month, days, 0, 0, 0, true);\n  return fromTo(firstDay, lastDay);\n}\n\nfunction weekDayNames() {\n  var firstDayOfWeek = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var weekDaysNames = XDate.locales[XDate.defaultLocale].dayNamesShort;\n  var dayShift = firstDayOfWeek % 7;\n\n  if (dayShift) {\n    weekDaysNames = weekDaysNames.slice(dayShift).concat(weekDaysNames.slice(0, dayShift));\n  }\n\n  return weekDaysNames;\n}\n\nfunction page(xd, firstDayOfWeek, showSixWeeks) {\n  var days = month(xd);\n  var before = [],\n      after = [];\n  var fdow = (7 + firstDayOfWeek) % 7 || 7;\n  var ldow = (fdow + 6) % 7;\n  firstDayOfWeek = firstDayOfWeek || 0;\n  var from = days[0].clone();\n  var daysBefore = from.getDay();\n\n  if (from.getDay() !== fdow) {\n    from.addDays(-(from.getDay() + 7 - fdow) % 7);\n  }\n\n  var to = days[days.length - 1].clone();\n  var day = to.getDay();\n\n  if (day !== ldow) {\n    to.addDays((ldow + 7 - day) % 7);\n  }\n\n  var daysForSixWeeks = (daysBefore + days.length) / 6 >= 6;\n\n  if (showSixWeeks && !daysForSixWeeks) {\n    to.addDays(7);\n  }\n\n  if (isLTE(from, days[0])) {\n    before = fromTo(from, days[0]);\n  }\n\n  if (isGTE(to, days[days.length - 1])) {\n    after = fromTo(days[days.length - 1], to);\n  }\n\n  return before.concat(days.slice(1, days.length - 1), after);\n}\n\nfunction isDateNotInTheRange(minDate, maxDate, date) {\n  return minDate && !isGTE(date, minDate) || maxDate && !isLTE(date, maxDate);\n}\n\nfunction getWeekDates(date, firstDay, format) {\n  if (date && parseDate(date).valid()) {\n    var current = parseDate(date);\n    var daysArray = [current];\n    var dayOfTheWeek = current.getDay() - firstDay;\n\n    if (dayOfTheWeek < 0) {\n      dayOfTheWeek = 7 + dayOfTheWeek;\n    }\n\n    var newDate = current;\n    var index = dayOfTheWeek - 1;\n\n    while (index >= 0) {\n      newDate = parseDate(newDate).addDays(-1);\n      daysArray.unshift(newDate);\n      index -= 1;\n    }\n\n    newDate = current;\n    index = dayOfTheWeek + 1;\n\n    while (index < 7) {\n      newDate = parseDate(newDate).addDays(1);\n      daysArray.push(newDate);\n      index += 1;\n    }\n\n    if (format) {\n      return daysArray.map(function (d) {\n        return d.toString(format);\n      });\n    }\n\n    return daysArray;\n  }\n}\n\nmodule.exports = {\n  weekDayNames: weekDayNames,\n  sameMonth: sameMonth,\n  sameWeek: sameWeek,\n  sameDate: sameDate,\n  month: month,\n  page: page,\n  fromTo: fromTo,\n  isToday: isToday,\n  isLTE: isLTE,\n  isGTE: isGTE,\n  isDateNotInTheRange: isDateNotInTheRange,\n  getWeekDates: getWeekDates\n};","map":{"version":3,"sources":["/Users/kw/LocalDev/efficiently-app/node_modules/react-native-calendars/src/dateutils.js"],"names":["XDate","require","parseDate","sameMonth","a","b","getFullYear","getMonth","sameDate","getDate","sameWeek","d1","d2","firstDayOfWeek","weekDates","getWeekDates","includes","isToday","day","today","isGTE","diffDays","isLTE","fromTo","days","from","to","addDays","getTime","push","month","xd","year","Date","firstDay","lastDay","weekDayNames","weekDaysNames","locales","defaultLocale","dayNamesShort","dayShift","slice","concat","page","showSixWeeks","before","after","fdow","ldow","clone","daysBefore","getDay","length","daysForSixWeeks","isDateNotInTheRange","minDate","maxDate","date","format","valid","current","daysArray","dayOfTheWeek","newDate","index","unshift","map","d","toString","module","exports"],"mappings":"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","sourcesContent":["const XDate = require('xdate');\nimport {parseDate} from './interface';\n\nfunction sameMonth(a, b) {\n  return (\n    a instanceof XDate && b instanceof XDate && a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth()\n  );\n}\n\nfunction sameDate(a, b) {\n  return (\n    a instanceof XDate &&\n    b instanceof XDate &&\n    a.getFullYear() === b.getFullYear() &&\n    a.getMonth() === b.getMonth() &&\n    a.getDate() === b.getDate()\n  );\n}\n\nfunction sameWeek(d1, d2, firstDayOfWeek) {\n  const weekDates = getWeekDates(d1, firstDayOfWeek, 'yyyy-MM-dd');\n  return weekDates?.includes(d2);\n}\n\nfunction isToday(day) {\n  return sameDate(XDate(day), XDate.today());\n}\n\nfunction isGTE(a, b) {\n  return b.diffDays(a) > -1;\n}\n\nfunction isLTE(a, b) {\n  return a.diffDays(b) > -1;\n}\n\nfunction fromTo(a, b) {\n  const days = [];\n  let from = +a,\n    to = +b;\n  for (; from <= to; from = new XDate(from, true).addDays(1).getTime()) {\n    days.push(new XDate(from, true));\n  }\n  return days;\n}\n\nfunction month(xd) {\n  const year = xd.getFullYear(),\n    month = xd.getMonth();\n  const days = new Date(year, month + 1, 0).getDate();\n\n  const firstDay = new XDate(year, month, 1, 0, 0, 0, true);\n  const lastDay = new XDate(year, month, days, 0, 0, 0, true);\n\n  return fromTo(firstDay, lastDay);\n}\n\nfunction weekDayNames(firstDayOfWeek = 0) {\n  let weekDaysNames = XDate.locales[XDate.defaultLocale].dayNamesShort;\n  const dayShift = firstDayOfWeek % 7;\n  if (dayShift) {\n    weekDaysNames = weekDaysNames.slice(dayShift).concat(weekDaysNames.slice(0, dayShift));\n  }\n  return weekDaysNames;\n}\n\nfunction page(xd, firstDayOfWeek, showSixWeeks) {\n  const days = month(xd);\n  let before = [],\n    after = [];\n\n  const fdow = (7 + firstDayOfWeek) % 7 || 7;\n  const ldow = (fdow + 6) % 7;\n\n  firstDayOfWeek = firstDayOfWeek || 0;\n\n  const from = days[0].clone();\n  const daysBefore = from.getDay();\n\n  if (from.getDay() !== fdow) {\n    from.addDays(-(from.getDay() + 7 - fdow) % 7);\n  }\n\n  const to = days[days.length - 1].clone();\n  const day = to.getDay();\n  if (day !== ldow) {\n    to.addDays((ldow + 7 - day) % 7);\n  }\n\n  const daysForSixWeeks = (daysBefore + days.length) / 6 >= 6;\n\n  if (showSixWeeks && !daysForSixWeeks) {\n    to.addDays(7);\n  }\n\n  if (isLTE(from, days[0])) {\n    before = fromTo(from, days[0]);\n  }\n\n  if (isGTE(to, days[days.length - 1])) {\n    after = fromTo(days[days.length - 1], to);\n  }\n\n  return before.concat(days.slice(1, days.length - 1), after);\n}\n\nfunction isDateNotInTheRange(minDate, maxDate, date) {\n  return (minDate && !isGTE(date, minDate)) || (maxDate && !isLTE(date, maxDate));\n}\n\nfunction getWeekDates(date, firstDay, format) {\n  if (date && parseDate(date).valid()) {\n    const current = parseDate(date);\n    const daysArray = [current];\n    let dayOfTheWeek = current.getDay() - firstDay;\n    if (dayOfTheWeek < 0) {\n      // to handle firstDay > 0\n      dayOfTheWeek = 7 + dayOfTheWeek;\n    }\n\n    let newDate = current;\n    let index = dayOfTheWeek - 1;\n    while (index >= 0) {\n      newDate = parseDate(newDate).addDays(-1);\n      daysArray.unshift(newDate);\n      index -= 1;\n    }\n\n    newDate = current;\n    index = dayOfTheWeek + 1;\n    while (index < 7) {\n      newDate = parseDate(newDate).addDays(1);\n      daysArray.push(newDate);\n      index += 1;\n    }\n\n    if (format) {\n      return daysArray.map(d => d.toString(format));\n    }\n\n    return daysArray;\n  }\n}\n\nmodule.exports = {\n  weekDayNames,\n  sameMonth,\n  sameWeek,\n  sameDate,\n  month,\n  page,\n  fromTo,\n  isToday,\n  isLTE,\n  isGTE,\n  isDateNotInTheRange,\n  getWeekDates\n};\n"]},"metadata":{},"sourceType":"module"}