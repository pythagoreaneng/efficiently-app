{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/kw/LocalDev/efficiently-app/node_modules/rn-sliding-up-panel/SlidingUpPanel.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clamp from 'clamp';\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport closest from \"./libs/closest\";\nimport measureElement from \"./libs/measureElement\";\nimport FlickAnimation from \"./libs/FlickAnimation\";\nimport { statusBarHeight, visibleHeight } from \"./libs/layout\";\nimport * as Constants from \"./libs/constants\";\nimport styles from \"./libs/styles\";\nvar keyboardShowEvent = Platform.select({\n  android: 'keyboardDidShow',\n  ios: 'keyboardWillShow'\n});\nvar keyboardHideEvent = Platform.select({\n  android: 'keyboardDidHide',\n  ios: 'keyboardWillHide'\n});\nvar usableHeight = visibleHeight() - statusBarHeight();\n\nvar SlidingUpPanel = function (_React$PureComponent) {\n  _inherits(SlidingUpPanel, _React$PureComponent);\n\n  var _super = _createSuper(SlidingUpPanel);\n\n  function SlidingUpPanel(props) {\n    var _this;\n\n    _classCallCheck(this, SlidingUpPanel);\n\n    _this = _super.call(this, props);\n    _this._panResponder = PanResponder.create({\n      onMoveShouldSetPanResponder: _this._onMoveShouldSetPanResponder.bind(_assertThisInitialized(_this)),\n      onPanResponderGrant: _this._onPanResponderGrant.bind(_assertThisInitialized(_this)),\n      onPanResponderMove: _this._onPanResponderMove.bind(_assertThisInitialized(_this)),\n      onPanResponderRelease: _this._onPanResponderRelease.bind(_assertThisInitialized(_this)),\n      onPanResponderTerminate: _this._onPanResponderTerminate.bind(_assertThisInitialized(_this)),\n      onShouldBlockNativeResponder: function onShouldBlockNativeResponder() {\n        return true;\n      },\n      onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {\n        return false;\n      }\n    });\n    _this._keyboardShowListener = Keyboard.addListener(keyboardShowEvent, _this._onKeyboardShown.bind(_assertThisInitialized(_this)));\n    _this._keyboardHideListener = Keyboard.addListener(keyboardHideEvent, _this._onKeyboardHiden.bind(_assertThisInitialized(_this)));\n    _this._backButtonListener = BackHandler.addEventListener('hardwareBackPress', _this._onBackButtonPress.bind(_assertThisInitialized(_this)));\n    _this._storeKeyboardPosition = _this._storeKeyboardPosition.bind(_assertThisInitialized(_this));\n    _this._isInsideDraggableRange = _this._isInsideDraggableRange.bind(_assertThisInitialized(_this));\n    _this._triggerAnimation = _this._triggerAnimation.bind(_assertThisInitialized(_this));\n    _this._renderContent = _this._renderContent.bind(_assertThisInitialized(_this));\n    _this._renderBackdrop = _this._renderBackdrop.bind(_assertThisInitialized(_this));\n    _this.show = _this.show.bind(_assertThisInitialized(_this));\n    _this.hide = _this.hide.bind(_assertThisInitialized(_this));\n    _this.scrollIntoView = _this.scrollIntoView.bind(_assertThisInitialized(_this));\n    var _this$props$draggable = _this.props.draggableRange,\n        top = _this$props$draggable.top,\n        bottom = _this$props$draggable.bottom;\n\n    var animatedValue = _this.props.animatedValue.__getValue();\n\n    var initialValue = clamp(animatedValue, bottom, top);\n\n    _this.props.animatedValue.setValue(initialValue);\n\n    _this._initialDragPosition = initialValue;\n    _this._backdropPointerEvents = _this._isAtBottom(initialValue) ? 'none' : 'box-only';\n    _this._flick = new FlickAnimation({\n      max: top,\n      min: bottom\n    });\n    _this._flickAnimationListener = _this._flick.onUpdate(function (value) {\n      _this.props.animatedValue.setValue(value);\n    });\n    _this._animatedValueListener = _this.props.animatedValue.addListener(_this._onAnimatedValueChange.bind(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(SlidingUpPanel, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.draggableRange.top !== this.props.draggableRange.top || prevProps.draggableRange.bottom !== this.props.draggableRange.bottom) {\n        var _this$props$draggable2 = this.props.draggableRange,\n            top = _this$props$draggable2.top,\n            bottom = _this$props$draggable2.bottom;\n\n        var animatedValue = this.props.animatedValue.__getValue();\n\n        this._flick.setMax(top);\n\n        this._flick.setMin(bottom);\n\n        if (animatedValue < bottom || animatedValue > top) {\n          var newValue = clamp(animatedValue, bottom, top);\n          this.props.animatedValue.setValue(newValue);\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this._animatedValueListener != null) {\n        this.props.animatedValue.removeListener(this._animatedValueListener);\n      }\n\n      if (this._keyboardShowListener != null) {\n        this._keyboardShowListener.remove();\n      }\n\n      if (this._keyboardHideListener != null) {\n        this._keyboardHideListener.remove();\n      }\n\n      if (this._flickAnimationListener != null) {\n        this._flickAnimationListener.remove();\n      }\n\n      if (this._backButtonListener != null) {\n        this._backButtonListener.remove();\n      }\n    }\n  }, {\n    key: \"_onMoveShouldSetPanResponder\",\n    value: function _onMoveShouldSetPanResponder(evt, gestureState) {\n      if (!this.props.allowDragging) {\n        return false;\n      }\n\n      var animatedValue = this.props.animatedValue.__getValue();\n\n      return this._isInsideDraggableRange(animatedValue, gestureState) && Math.abs(gestureState.dy) > this.props.minimumDistanceThreshold;\n    }\n  }, {\n    key: \"_onPanResponderGrant\",\n    value: function _onPanResponderGrant(evt, gestureState) {\n      this._flick.stop();\n\n      var value = this.props.animatedValue.__getValue();\n\n      this._initialDragPosition = value;\n      this.props.onDragStart(value, gestureState);\n    }\n  }, {\n    key: \"_onPanResponderMove\",\n    value: function _onPanResponderMove(evt, gestureState) {\n      var _this$props$draggable3 = this.props.draggableRange,\n          top = _this$props$draggable3.top,\n          bottom = _this$props$draggable3.bottom;\n      var delta = this._initialDragPosition - gestureState.dy;\n      var newValue = clamp(delta, top, bottom);\n      this.props.animatedValue.setValue(newValue);\n    }\n  }, {\n    key: \"_onPanResponderRelease\",\n    value: function _onPanResponderRelease(evt, gestureState) {\n      var animatedValue = this.props.animatedValue.__getValue();\n\n      if (!this._isInsideDraggableRange(animatedValue, gestureState)) {\n        return true;\n      }\n\n      this._initialDragPosition = animatedValue;\n      this.props.onDragEnd(animatedValue, gestureState);\n\n      if (!this.props.allowMomentum) {\n        return true;\n      }\n\n      if (this.props.snappingPoints.length > 0) {\n        this.props.onMomentumDragStart(animatedValue);\n        var _this$props$draggable4 = this.props.draggableRange,\n            top = _this$props$draggable4.top,\n            bottom = _this$props$draggable4.bottom;\n\n        var nextPoint = this._flick.predictNextPosition({\n          fromValue: animatedValue,\n          velocity: gestureState.vy,\n          friction: this.props.friction\n        });\n\n        var closestPoint = closest(nextPoint, [bottom].concat(_toConsumableArray(this.props.snappingPoints), [top]));\n        var remainingDistance = animatedValue - closestPoint;\n        var velocity = remainingDistance / Constants.TIME_CONSTANT;\n\n        this._flick.start({\n          velocity: velocity,\n          toValue: closestPoint,\n          fromValue: animatedValue,\n          friction: this.props.friction,\n          onMomentumEnd: this.props.onMomentumDragEnd\n        });\n\n        return true;\n      }\n\n      if (Math.abs(gestureState.vy) > this.props.minimumVelocityThreshold) {\n        this.props.onMomentumDragStart(animatedValue);\n\n        this._flick.start({\n          velocity: gestureState.vy,\n          fromValue: animatedValue,\n          friction: this.props.friction,\n          onMomentumEnd: this.props.onMomentumDragEnd\n        });\n      }\n\n      return true;\n    }\n  }, {\n    key: \"_onPanResponderTerminate\",\n    value: function _onPanResponderTerminate(evt, gestureState) {\n      var animatedValue = this.props.animatedValue.__getValue();\n\n      if (!this._isInsideDraggableRange(animatedValue, gestureState)) {\n        return;\n      }\n\n      this._initialDragPosition = animatedValue;\n      this.props.onDragEnd(animatedValue, gestureState);\n    }\n  }, {\n    key: \"_onAnimatedValueChange\",\n    value: function _onAnimatedValueChange(_ref) {\n      var value = _ref.value;\n\n      var isAtBottom = this._isAtBottom(value);\n\n      if (isAtBottom) {\n        this.props.onBottomReached();\n        this.props.avoidKeyboard && Keyboard.dismiss();\n      }\n\n      if (this._backdrop == null) {\n        return;\n      }\n\n      if (isAtBottom && this._backdropPointerEvents === 'box-only') {\n        this._backdropPointerEvents = 'none';\n\n        this._backdrop.setNativeProps({\n          pointerEvents: 'none'\n        });\n      }\n\n      if (!isAtBottom && this._backdropPointerEvents === 'none') {\n        this._backdropPointerEvents = 'box-only';\n\n        this._backdrop.setNativeProps({\n          pointerEvents: 'box-only'\n        });\n      }\n    }\n  }, {\n    key: \"_onKeyboardShown\",\n    value: function _onKeyboardShown(event) {\n      var _this2 = this;\n\n      if (!this.props.avoidKeyboard) {\n        return;\n      }\n\n      this._storeKeyboardPosition(event.endCoordinates.screenY);\n\n      var node = TextInput.State.currentlyFocusedInput ? findNodeHandle(TextInput.State.currentlyFocusedInput()) : TextInput.State.currentlyFocusedField();\n\n      if (node != null) {\n        UIManager.viewIsDescendantOf(node, findNodeHandle(this._content), function (isDescendant) {\n          isDescendant && _this2.scrollIntoView(node);\n        });\n      }\n    }\n  }, {\n    key: \"_onKeyboardHiden\",\n    value: function _onKeyboardHiden() {\n      this._storeKeyboardPosition(0);\n\n      var animatedValue = this.props.animatedValue.__getValue();\n\n      if (this._lastPosition != null && !this._isAtBottom(animatedValue)) {\n        Animated.timing(this.props.animatedValue, {\n          toValue: this._lastPosition,\n          duration: Constants.KEYBOARD_TRANSITION_DURATION,\n          useNativeDriver: true\n        }).start();\n      }\n\n      this._lastPosition = null;\n    }\n  }, {\n    key: \"_onBackButtonPress\",\n    value: function _onBackButtonPress() {\n      if (this.props.onBackButtonPress) {\n        return this.props.onBackButtonPress();\n      }\n\n      var value = this.props.animatedValue.__getValue();\n\n      if (this._isAtBottom(value)) {\n        return false;\n      }\n\n      this.hide();\n      return true;\n    }\n  }, {\n    key: \"_isInsideDraggableRange\",\n    value: function _isInsideDraggableRange(value, gestureState) {\n      var _this$props$draggable5 = this.props.draggableRange,\n          top = _this$props$draggable5.top,\n          bottom = _this$props$draggable5.bottom;\n\n      if (gestureState.dy > 0) {\n        return value >= bottom;\n      }\n\n      return value <= top;\n    }\n  }, {\n    key: \"_isAtBottom\",\n    value: function _isAtBottom(value) {\n      var bottom = this.props.draggableRange.bottom;\n      return value <= bottom;\n    }\n  }, {\n    key: \"_storeKeyboardPosition\",\n    value: function _storeKeyboardPosition(value) {\n      this._keyboardYPosition = value;\n    }\n  }, {\n    key: \"_triggerAnimation\",\n    value: function _triggerAnimation() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var animatedValue = this.props.animatedValue.__getValue();\n\n      var remainingDistance = animatedValue - options.toValue;\n      var velocity = options.velocity || remainingDistance / Constants.TIME_CONSTANT;\n\n      this._flick.start({\n        velocity: velocity,\n        toValue: options.toValue,\n        fromValue: animatedValue,\n        friction: this.props.friction\n      });\n    }\n  }, {\n    key: \"_renderBackdrop\",\n    value: function _renderBackdrop() {\n      var _this3 = this;\n\n      if (!this.props.showBackdrop) {\n        return null;\n      }\n\n      var _this$props$draggable6 = this.props.draggableRange,\n          top = _this$props$draggable6.top,\n          bottom = _this$props$draggable6.bottom;\n      var backdropStyle = this.props.backdropStyle;\n      var backdropOpacity = this.props.animatedValue.interpolate({\n        inputRange: [bottom, top],\n        outputRange: [0, this.props.backdropOpacity],\n        extrapolate: 'clamp'\n      });\n      return React.createElement(Animated.View, {\n        key: \"backdrop\",\n        pointerEvents: this._backdropPointerEvents,\n        ref: function ref(c) {\n          return _this3._backdrop = c;\n        },\n        onTouchStart: function onTouchStart() {\n          return _this3._flick.stop();\n        },\n        onTouchEnd: function onTouchEnd() {\n          return _this3.hide();\n        },\n        style: [styles.backdrop, backdropStyle, {\n          opacity: backdropOpacity\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 7\n        }\n      });\n    }\n  }, {\n    key: \"_renderContent\",\n    value: function _renderContent() {\n      var _this4 = this;\n\n      var _this$props = this.props,\n          height = _this$props.height,\n          _this$props$draggable7 = _this$props.draggableRange,\n          top = _this$props$draggable7.top,\n          bottom = _this$props$draggable7.bottom,\n          containerStyle = _this$props.containerStyle;\n      var translateY = this.props.animatedValue.interpolate({\n        inputRange: [bottom, top],\n        outputRange: [-bottom, -top],\n        extrapolate: 'clamp'\n      });\n      var transform = {\n        transform: [{\n          translateY: translateY\n        }]\n      };\n      var animatedContainerStyles = [styles.animatedContainer, transform, containerStyle, {\n        height: height,\n        bottom: -height\n      }];\n\n      if (typeof this.props.children === 'function') {\n        return React.createElement(Animated.View, {\n          key: \"content\",\n          pointerEvents: \"box-none\",\n          ref: function ref(c) {\n            return _this4._content = c;\n          },\n          style: animatedContainerStyles,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 441,\n            columnNumber: 9\n          }\n        }, this.props.children(this._panResponder.panHandlers));\n      }\n\n      return React.createElement(Animated.View, _extends({\n        key: \"content\",\n        pointerEvents: \"box-none\",\n        ref: function ref(c) {\n          return _this4._content = c;\n        },\n        style: animatedContainerStyles\n      }, this._panResponder.panHandlers, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 7\n        }\n      }), this.props.children);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return [this._renderBackdrop(), this._renderContent()];\n    }\n  }, {\n    key: \"show\",\n    value: function show(mayBeValueOrOptions) {\n      if (!mayBeValueOrOptions) {\n        var top = this.props.draggableRange.top;\n        return this._triggerAnimation({\n          toValue: top\n        });\n      }\n\n      if (typeof mayBeValueOrOptions === 'object') {\n        return this._triggerAnimation(mayBeValueOrOptions);\n      }\n\n      return this._triggerAnimation({\n        toValue: mayBeValueOrOptions\n      });\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      var bottom = this.props.draggableRange.bottom;\n\n      this._triggerAnimation({\n        toValue: bottom\n      });\n    }\n  }, {\n    key: \"scrollIntoView\",\n    value: function scrollIntoView(node) {\n      var options,\n          _await$measureElement,\n          y,\n          extraMargin,\n          keyboardActualPos,\n          fromKeyboardToElement,\n          transitionDistance,\n          _args = arguments;\n\n      return _regeneratorRuntime.async(function scrollIntoView$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n              if (this._keyboardYPosition) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 3:\n              this._flick.stop();\n\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(measureElement(node));\n\n            case 6:\n              _await$measureElement = _context.sent;\n              y = _await$measureElement.y;\n              extraMargin = options.keyboardExtraMargin || Constants.KEYBOARD_EXTRA_MARGIN;\n              keyboardActualPos = this._keyboardYPosition - extraMargin;\n\n              if (y > keyboardActualPos) {\n                this._lastPosition = this.props.animatedValue.__getValue();\n                fromKeyboardToElement = y - keyboardActualPos;\n                transitionDistance = this._lastPosition + fromKeyboardToElement;\n                Animated.timing(this.props.animatedValue, {\n                  toValue: transitionDistance,\n                  duration: Constants.KEYBOARD_TRANSITION_DURATION,\n                  useNativeDriver: true\n                }).start();\n              }\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return SlidingUpPanel;\n}(React.PureComponent);\n\nSlidingUpPanel.propTypes = {\n  height: PropTypes.number,\n  animatedValue: PropTypes.instanceOf(Animated.Value),\n  draggableRange: PropTypes.shape({\n    top: PropTypes.number,\n    bottom: PropTypes.number\n  }),\n  snappingPoints: PropTypes.arrayOf(PropTypes.number),\n  minimumVelocityThreshold: PropTypes.number,\n  minimumDistanceThreshold: PropTypes.number,\n  avoidKeyboard: PropTypes.bool,\n  onBackButtonPress: PropTypes.func,\n  onDragStart: PropTypes.func,\n  onDragEnd: PropTypes.func,\n  onMomentumDragStart: PropTypes.func,\n  onMomentumDragEnd: PropTypes.func,\n  onBottomReached: PropTypes.func,\n  allowMomentum: PropTypes.bool,\n  allowDragging: PropTypes.bool,\n  showBackdrop: PropTypes.bool,\n  backdropOpacity: PropTypes.number,\n  friction: PropTypes.number,\n  containerStyle: ViewPropTypes.style,\n  backdropStyle: ViewPropTypes.style,\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.func])\n};\nSlidingUpPanel.defaultProps = {\n  height: usableHeight,\n  animatedValue: new Animated.Value(0),\n  draggableRange: {\n    top: usableHeight,\n    bottom: 0\n  },\n  snappingPoints: [],\n  minimumVelocityThreshold: Constants.DEFAULT_MINIMUM_VELOCITY_THRESHOLD,\n  minimumDistanceThreshold: Constants.DEFAULT_MINIMUM_DISTANCE_THRESHOLD,\n  avoidKeyboard: true,\n  onBackButtonPress: null,\n  onDragStart: function onDragStart() {},\n  onDragEnd: function onDragEnd() {},\n  onMomentumDragStart: function onMomentumDragStart() {},\n  onMomentumDragEnd: function onMomentumDragEnd() {},\n  allowMomentum: true,\n  allowDragging: true,\n  showBackdrop: true,\n  backdropOpacity: 0.75,\n  friction: Constants.DEFAULT_FRICTION,\n  onBottomReached: function onBottomReached() {\n    return null;\n  }\n};\nexport default SlidingUpPanel;","map":{"version":3,"sources":["/Users/kw/LocalDev/efficiently-app/node_modules/rn-sliding-up-panel/SlidingUpPanel.js"],"names":["React","PropTypes","clamp","ViewPropTypes","closest","measureElement","FlickAnimation","statusBarHeight","visibleHeight","Constants","styles","keyboardShowEvent","Platform","select","android","ios","keyboardHideEvent","usableHeight","SlidingUpPanel","props","_panResponder","PanResponder","create","onMoveShouldSetPanResponder","_onMoveShouldSetPanResponder","bind","onPanResponderGrant","_onPanResponderGrant","onPanResponderMove","_onPanResponderMove","onPanResponderRelease","_onPanResponderRelease","onPanResponderTerminate","_onPanResponderTerminate","onShouldBlockNativeResponder","onPanResponderTerminationRequest","_keyboardShowListener","Keyboard","addListener","_onKeyboardShown","_keyboardHideListener","_onKeyboardHiden","_backButtonListener","BackHandler","addEventListener","_onBackButtonPress","_storeKeyboardPosition","_isInsideDraggableRange","_triggerAnimation","_renderContent","_renderBackdrop","show","hide","scrollIntoView","draggableRange","top","bottom","animatedValue","__getValue","initialValue","setValue","_initialDragPosition","_backdropPointerEvents","_isAtBottom","_flick","max","min","_flickAnimationListener","onUpdate","value","_animatedValueListener","_onAnimatedValueChange","prevProps","setMax","setMin","newValue","removeListener","remove","evt","gestureState","allowDragging","Math","abs","dy","minimumDistanceThreshold","stop","onDragStart","delta","onDragEnd","allowMomentum","snappingPoints","length","onMomentumDragStart","nextPoint","predictNextPosition","fromValue","velocity","vy","friction","closestPoint","remainingDistance","TIME_CONSTANT","start","toValue","onMomentumEnd","onMomentumDragEnd","minimumVelocityThreshold","isAtBottom","onBottomReached","avoidKeyboard","dismiss","_backdrop","setNativeProps","pointerEvents","event","endCoordinates","screenY","node","TextInput","State","currentlyFocusedInput","findNodeHandle","currentlyFocusedField","UIManager","viewIsDescendantOf","_content","isDescendant","_lastPosition","Animated","timing","duration","KEYBOARD_TRANSITION_DURATION","useNativeDriver","onBackButtonPress","_keyboardYPosition","options","showBackdrop","backdropStyle","backdropOpacity","interpolate","inputRange","outputRange","extrapolate","c","backdrop","opacity","height","containerStyle","translateY","transform","animatedContainerStyles","animatedContainer","children","panHandlers","mayBeValueOrOptions","y","extraMargin","keyboardExtraMargin","KEYBOARD_EXTRA_MARGIN","keyboardActualPos","fromKeyboardToElement","transitionDistance","PureComponent","propTypes","number","instanceOf","Value","shape","arrayOf","bool","func","style","oneOfType","element","defaultProps","DEFAULT_MINIMUM_VELOCITY_THRESHOLD","DEFAULT_MINIMUM_DISTANCE_THRESHOLD","DEFAULT_FRICTION"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport clamp from 'clamp'\n\nimport {\n  ViewPropTypes,\n  UIManager,\n  TextInput,\n  Keyboard,\n  BackHandler,\n  Animated,\n  PanResponder,\n  Platform,\n  findNodeHandle\n} from 'react-native'\n\nimport closest from './libs/closest'\nimport measureElement from './libs/measureElement'\nimport FlickAnimation from './libs/FlickAnimation'\nimport {statusBarHeight, visibleHeight} from './libs/layout'\nimport * as Constants from './libs/constants'\nimport styles from './libs/styles'\n\nconst keyboardShowEvent = Platform.select({\n  android: 'keyboardDidShow',\n  ios: 'keyboardWillShow'\n})\n\nconst keyboardHideEvent = Platform.select({\n  android: 'keyboardDidHide',\n  ios: 'keyboardWillHide'\n})\n\nconst usableHeight = visibleHeight() - statusBarHeight()\n\nclass SlidingUpPanel extends React.PureComponent {\n  static propTypes = {\n    height: PropTypes.number,\n    animatedValue: PropTypes.instanceOf(Animated.Value),\n    draggableRange: PropTypes.shape({\n      top: PropTypes.number,\n      bottom: PropTypes.number\n    }),\n    snappingPoints: PropTypes.arrayOf(PropTypes.number),\n    minimumVelocityThreshold: PropTypes.number,\n    minimumDistanceThreshold: PropTypes.number,\n    avoidKeyboard: PropTypes.bool,\n    onBackButtonPress: PropTypes.func,\n    onDragStart: PropTypes.func,\n    onDragEnd: PropTypes.func,\n    onMomentumDragStart: PropTypes.func,\n    onMomentumDragEnd: PropTypes.func,\n    onBottomReached: PropTypes.func,\n    allowMomentum: PropTypes.bool,\n    allowDragging: PropTypes.bool,\n    showBackdrop: PropTypes.bool,\n    backdropOpacity: PropTypes.number,\n    friction: PropTypes.number,\n    containerStyle: ViewPropTypes.style,\n    backdropStyle: ViewPropTypes.style,\n    children: PropTypes.oneOfType([PropTypes.element, PropTypes.func])\n  }\n\n  static defaultProps = {\n    height: usableHeight,\n    animatedValue: new Animated.Value(0),\n    draggableRange: {top: usableHeight, bottom: 0},\n    snappingPoints: [],\n    minimumVelocityThreshold: Constants.DEFAULT_MINIMUM_VELOCITY_THRESHOLD,\n    minimumDistanceThreshold: Constants.DEFAULT_MINIMUM_DISTANCE_THRESHOLD,\n    avoidKeyboard: true,\n    onBackButtonPress: null,\n    onDragStart: () => {},\n    onDragEnd: () => {},\n    onMomentumDragStart: () => {},\n    onMomentumDragEnd: () => {},\n    allowMomentum: true,\n    allowDragging: true,\n    showBackdrop: true,\n    backdropOpacity: 0.75,\n    friction: Constants.DEFAULT_FRICTION,\n    onBottomReached: () => null,\n  }\n\n  // eslint-disable-next-line react/sort-comp\n  _panResponder = PanResponder.create({\n    onMoveShouldSetPanResponder: this._onMoveShouldSetPanResponder.bind(this),\n    onPanResponderGrant: this._onPanResponderGrant.bind(this),\n    onPanResponderMove: this._onPanResponderMove.bind(this),\n    onPanResponderRelease: this._onPanResponderRelease.bind(this),\n    onPanResponderTerminate: this._onPanResponderTerminate.bind(this),\n    onShouldBlockNativeResponder: () => true,\n    onPanResponderTerminationRequest: () => false\n  })\n\n  _keyboardShowListener = Keyboard.addListener(\n    keyboardShowEvent,\n    this._onKeyboardShown.bind(this)\n  )\n\n  _keyboardHideListener = Keyboard.addListener(\n    keyboardHideEvent,\n    this._onKeyboardHiden.bind(this)\n  )\n\n  _backButtonListener = BackHandler.addEventListener(\n    'hardwareBackPress',\n    this._onBackButtonPress.bind(this)\n  )\n\n  constructor(props) {\n    super(props)\n\n    this._storeKeyboardPosition = this._storeKeyboardPosition.bind(this)\n    this._isInsideDraggableRange = this._isInsideDraggableRange.bind(this)\n    this._triggerAnimation = this._triggerAnimation.bind(this)\n    this._renderContent = this._renderContent.bind(this)\n    this._renderBackdrop = this._renderBackdrop.bind(this)\n\n    this.show = this.show.bind(this)\n    this.hide = this.hide.bind(this)\n    this.scrollIntoView = this.scrollIntoView.bind(this)\n\n    const {top, bottom} = this.props.draggableRange\n    const animatedValue = this.props.animatedValue.__getValue()\n    const initialValue = clamp(animatedValue, bottom, top)\n\n    // Ensure the animation are within draggable range\n    this.props.animatedValue.setValue(initialValue)\n\n    this._initialDragPosition = initialValue\n    this._backdropPointerEvents = this._isAtBottom(initialValue) ? 'none' : 'box-only' // prettier-ignore\n    this._flick = new FlickAnimation({max: top, min: bottom})\n\n    this._flickAnimationListener = this._flick.onUpdate(value => {\n      this.props.animatedValue.setValue(value)\n    })\n\n    this._animatedValueListener = this.props.animatedValue.addListener(\n      this._onAnimatedValueChange.bind(this)\n    )\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.draggableRange.top !== this.props.draggableRange.top ||\n      prevProps.draggableRange.bottom !== this.props.draggableRange.bottom\n    ) {\n      const {top, bottom} = this.props.draggableRange\n      const animatedValue = this.props.animatedValue.__getValue()\n\n      this._flick.setMax(top)\n      this._flick.setMin(bottom)\n\n      // If the panel is below the new 'bottom'\n      if (animatedValue < bottom || animatedValue > top) {\n        const newValue = clamp(animatedValue, bottom, top)\n        this.props.animatedValue.setValue(newValue)\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this._animatedValueListener != null) {\n      this.props.animatedValue.removeListener(this._animatedValueListener)\n    }\n\n    if (this._keyboardShowListener != null) {\n      this._keyboardShowListener.remove()\n    }\n\n    if (this._keyboardHideListener != null) {\n      this._keyboardHideListener.remove()\n    }\n\n    if (this._flickAnimationListener != null) {\n      this._flickAnimationListener.remove()\n    }\n\n    if (this._backButtonListener != null) {\n      this._backButtonListener.remove()\n    }\n  }\n\n  _onMoveShouldSetPanResponder(evt, gestureState) {\n    if (!this.props.allowDragging) {\n      return false\n    }\n\n    const animatedValue = this.props.animatedValue.__getValue()\n\n    return (\n      this._isInsideDraggableRange(animatedValue, gestureState) &&\n      Math.abs(gestureState.dy) > this.props.minimumDistanceThreshold\n    )\n  }\n\n  _onPanResponderGrant(evt, gestureState) {\n    this._flick.stop()\n\n    const value = this.props.animatedValue.__getValue()\n\n    this._initialDragPosition = value\n    this.props.onDragStart(value, gestureState)\n  }\n\n  _onPanResponderMove(evt, gestureState) {\n    const {top, bottom} = this.props.draggableRange\n    const delta = this._initialDragPosition - gestureState.dy\n    const newValue = clamp(delta, top, bottom)\n\n    this.props.animatedValue.setValue(newValue)\n  }\n\n  // Trigger when you release your finger\n  _onPanResponderRelease(evt, gestureState) {\n    const animatedValue = this.props.animatedValue.__getValue()\n\n    if (!this._isInsideDraggableRange(animatedValue, gestureState)) {\n      return true\n    }\n\n    this._initialDragPosition = animatedValue\n    this.props.onDragEnd(animatedValue, gestureState)\n\n    if (!this.props.allowMomentum) {\n      return true\n    }\n\n    if (this.props.snappingPoints.length > 0) {\n      this.props.onMomentumDragStart(animatedValue)\n\n      const {top, bottom} = this.props.draggableRange\n      const nextPoint = this._flick.predictNextPosition({\n        fromValue: animatedValue,\n        velocity: gestureState.vy,\n        friction: this.props.friction\n      })\n\n      const closestPoint = closest(nextPoint, [\n        bottom,\n        ...this.props.snappingPoints,\n        top\n      ])\n\n      const remainingDistance = animatedValue - closestPoint\n      const velocity = remainingDistance / Constants.TIME_CONSTANT\n\n      this._flick.start({\n        velocity,\n        toValue: closestPoint,\n        fromValue: animatedValue,\n        friction: this.props.friction,\n        onMomentumEnd: this.props.onMomentumDragEnd\n      })\n      return true\n    }\n\n    if (Math.abs(gestureState.vy) > this.props.minimumVelocityThreshold) {\n      this.props.onMomentumDragStart(animatedValue)\n\n      this._flick.start({\n        velocity: gestureState.vy,\n        fromValue: animatedValue,\n        friction: this.props.friction,\n        onMomentumEnd: this.props.onMomentumDragEnd\n      })\n    }\n    return true\n  }\n\n  _onPanResponderTerminate(evt, gestureState) {\n    const animatedValue = this.props.animatedValue.__getValue()\n\n    if (!this._isInsideDraggableRange(animatedValue, gestureState)) {\n      return\n    }\n\n    this._initialDragPosition = animatedValue\n    this.props.onDragEnd(animatedValue, gestureState)\n  }\n\n  _onAnimatedValueChange({value}) {\n    const isAtBottom = this._isAtBottom(value)\n\n    if (isAtBottom) {\n      this.props.onBottomReached()\n      this.props.avoidKeyboard && Keyboard.dismiss()\n    }\n\n    if (this._backdrop == null) {\n      return\n    }\n\n    // @TODO: Find a better way to update pointer events when animated value changed\n\n    if (isAtBottom && this._backdropPointerEvents === 'box-only') {\n      this._backdropPointerEvents = 'none'\n      this._backdrop.setNativeProps({pointerEvents: 'none'})\n    }\n\n    if (!isAtBottom && this._backdropPointerEvents === 'none') {\n      this._backdropPointerEvents = 'box-only'\n      this._backdrop.setNativeProps({pointerEvents: 'box-only'})\n    }\n  }\n\n  _onKeyboardShown(event) {\n    if (!this.props.avoidKeyboard) {\n      return\n    }\n\n    this._storeKeyboardPosition(event.endCoordinates.screenY)\n\n    const node = TextInput.State.currentlyFocusedInput\n      ? findNodeHandle(TextInput.State.currentlyFocusedInput())\n      : TextInput.State.currentlyFocusedField()\n\n    if (node != null) {\n      UIManager.viewIsDescendantOf(node, findNodeHandle(this._content), (isDescendant) => {\n        isDescendant && this.scrollIntoView(node)\n      });\n    }\n  }\n\n  _onKeyboardHiden() {\n    this._storeKeyboardPosition(0)\n\n    const animatedValue = this.props.animatedValue.__getValue()\n\n    // Restore last position\n    if (this._lastPosition != null && !this._isAtBottom(animatedValue)) {\n      Animated.timing(this.props.animatedValue, {\n        toValue: this._lastPosition,\n        duration: Constants.KEYBOARD_TRANSITION_DURATION,\n        useNativeDriver: true\n      }).start()\n    }\n\n    this._lastPosition = null\n  }\n\n  _onBackButtonPress() {\n    if (this.props.onBackButtonPress) {\n      return this.props.onBackButtonPress()\n    }\n\n    const value = this.props.animatedValue.__getValue()\n\n    if (this._isAtBottom(value)) {\n      return false\n    }\n\n    this.hide()\n\n    return true\n  }\n\n  _isInsideDraggableRange(value, gestureState) {\n    const {top, bottom} = this.props.draggableRange\n\n    if (gestureState.dy > 0) {\n      return value >= bottom\n    }\n\n    return value <= top\n  }\n\n  _isAtBottom(value) {\n    const {bottom} = this.props.draggableRange\n    return value <= bottom\n  }\n\n  _storeKeyboardPosition(value) {\n    this._keyboardYPosition = value\n  }\n\n  _triggerAnimation(options = {}) {\n    const animatedValue = this.props.animatedValue.__getValue()\n    const remainingDistance = animatedValue - options.toValue\n    const velocity = options.velocity || remainingDistance / Constants.TIME_CONSTANT // prettier-ignore\n\n    this._flick.start({\n      velocity,\n      toValue: options.toValue,\n      fromValue: animatedValue,\n      friction: this.props.friction\n    })\n  }\n\n  _renderBackdrop() {\n    if (!this.props.showBackdrop) {\n      return null\n    }\n\n    const {top, bottom} = this.props.draggableRange\n    const {backdropStyle} = this.props\n\n    const backdropOpacity = this.props.animatedValue.interpolate({\n      inputRange: [bottom, top],\n      outputRange: [0, this.props.backdropOpacity],\n      extrapolate: 'clamp'\n    })\n\n    return (\n      <Animated.View\n        key=\"backdrop\"\n        pointerEvents={this._backdropPointerEvents}\n        ref={c => (this._backdrop = c)}\n        onTouchStart={() => this._flick.stop()}\n        onTouchEnd={() => this.hide()}\n        style={[styles.backdrop, backdropStyle, {opacity: backdropOpacity}]}\n      />\n    )\n  }\n\n  _renderContent() {\n    const {\n      height,\n      draggableRange: {top, bottom},\n      containerStyle\n    } = this.props\n\n    const translateY = this.props.animatedValue.interpolate({\n      inputRange: [bottom, top],\n      outputRange: [-bottom, -top],\n      extrapolate: 'clamp'\n    })\n\n    const transform = {transform: [{translateY}]}\n\n    const animatedContainerStyles = [\n      styles.animatedContainer,\n      transform,\n      containerStyle,\n      {height, bottom: -height}\n    ]\n\n    if (typeof this.props.children === 'function') {\n      return (\n        <Animated.View\n          key=\"content\"\n          pointerEvents=\"box-none\"\n          ref={c => (this._content = c)}\n          style={animatedContainerStyles}>\n          {this.props.children(this._panResponder.panHandlers)}\n        </Animated.View>\n      )\n    }\n\n    return (\n      <Animated.View\n        key=\"content\"\n        pointerEvents=\"box-none\"\n        ref={c => (this._content = c)}\n        style={animatedContainerStyles}\n        {...this._panResponder.panHandlers}>\n        {this.props.children}\n      </Animated.View>\n    )\n  }\n\n  render() {\n    return [this._renderBackdrop(), this._renderContent()]\n  }\n\n  show(mayBeValueOrOptions) {\n    if (!mayBeValueOrOptions) {\n      const {top} = this.props.draggableRange\n      return this._triggerAnimation({toValue: top})\n    }\n\n    if (typeof mayBeValueOrOptions === 'object') {\n      return this._triggerAnimation(mayBeValueOrOptions)\n    }\n\n    return this._triggerAnimation({toValue: mayBeValueOrOptions})\n  }\n\n  hide() {\n    const {bottom} = this.props.draggableRange\n    this._triggerAnimation({toValue: bottom})\n  }\n\n  async scrollIntoView(node, options = {}) {\n    if (!this._keyboardYPosition) {\n      return\n    }\n\n    // Stop any animation when the keyboard starts showing\n    this._flick.stop()\n\n    const {y} = await measureElement(node)\n    const extraMargin = options.keyboardExtraMargin || Constants.KEYBOARD_EXTRA_MARGIN // prettier-ignore\n    const keyboardActualPos = this._keyboardYPosition - extraMargin\n\n    if (y > keyboardActualPos) {\n      this._lastPosition = this.props.animatedValue.__getValue()\n\n      const fromKeyboardToElement = y - keyboardActualPos\n      const transitionDistance = this._lastPosition + fromKeyboardToElement\n\n      Animated.timing(this.props.animatedValue, {\n        toValue: transitionDistance,\n        duration: Constants.KEYBOARD_TRANSITION_DURATION,\n        useNativeDriver: true\n      }).start()\n    }\n  }\n}\n\nexport default SlidingUpPanel\n"]},"metadata":{},"sourceType":"module"}